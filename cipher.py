"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Tanmayee Bharadwaj and Sana Haider, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: tpb675
UT EID 2: tpb675
"""
import sys

def rail_fence_encode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: returns a single string that is encoded with
        rail fence algorithm
    """
    rows = ["" for _ in range(key)]

    row = 0
    direction = 1

    for char in string:
        rows[row] += char
        row += direction

        if row == 0 or row == key - 1:
            direction *= -1

    return "".join(rows)


def rail_fence_decode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: function returns a single string that is decoded with
        rail fence algorithm
    """
    pattern = []
    row = 0
    direction = 1
    n = len(string)
    for _ in range(n):
        pattern.append(row)
        row += direction
        if row == 0 or row == key - 1:
            direction *= -1

    rows = ["" for _ in range(key)]
    idx = 0
    for r in range(key):
        for i in range(n):
            if pattern[i] == r:
                rows[r] += string[idx]
                idx += 1

    res = ""
    row_indices = [0] * key
    row = 0
    direction = 1
    for _ in range(n):
        res += rows[row][row_indices[row]]
        row_indices[row] += 1
        row += direction
        if row == 0 or row == key - 1:
            direction *= -1

    return res


def filter_string(string):
    """
    pre: string is a string of characters
    post: function converts all characters to lower case and then
        removes all digits, punctuation marks, and spaces. It
        returns a single string with only lower case characters
    """
    res = ""

    string = string.lower()
    for char in string:
        if "a" <= char <= "z":
            res += char

    return res

def encode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the plain text
    post: function returns a single character encoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    a = ord("a")
    shift = ord(p) - a
    original = ord(s) - a
    shifted = (original + shift) % 26
    encoded_char = chr(shifted + a)

    return encoded_char


def decode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the encrypted text
    post: function returns a single character decoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    a = ord("a")
    shift = ord(p) - a
    original = ord(s) - a
    shifted = (original - shift) % 26
    decoded_char = chr(shifted + a)

    return decoded_char


def vigenere_encode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is encoded with
        Vigenere algorithm
    """
    string = filter_string(string)
    phrase = filter_string(phrase)
    n = len(string)
    m = len(phrase)
    res = ""
    for i in range(n):
        res += encode_character(phrase[i % m], string[i])
    return res


def vigenere_decode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is decoded with
        Vigenere algorithm
    """
    string = filter_string(string)
    phrase = filter_string(phrase)
    n = len(string)
    m = len(phrase)
    res = ""
    for i in range(n):
        res += decode_character(phrase[i % m], string[i])
    return res


def main():
    """Main function that reads stdin and runs each cipher"""
    print("Rail Fence Cipher")
    print()

    # Read input from stdin using sys.stdin.read() (split to simulate multiple inputs)
    data = sys.stdin.read().splitlines()
    input()

    # Plain text input from stdin
    plain_text = data[0]

    # Key input from stdin
    key = int(data[1])

    # Encrypt and print the encoded text using rail fence cipher
    print(f"Encoded Text: {rail_fence_encode(plain_text, key)}\n")

    # Read encoded text from stdin
    encoded_text = data[2]

    # Key input for decoding
    key = int(data[3])

    # Decrypt and print the plain text using rail fence cipher
    print(f"Decoded Text: {rail_fence_decode(encoded_text, key)}\n")

    print("Vigenere Cipher\n")

    # Plain text input for Vigenere cipher
    plain_text = data[4]

    # Pass phrase input for Vigenere cipher
    phrase = data[5]

    # Encrypt and print the encoded text using Vigenere cipher
    print(f"Encoded Text: {vigenere_encode(plain_text, phrase)}\n")

    # Read the encoded text for Vigenere cipher from stdin
    encoded_text = data[6]

    # Pass phrase input for decoding
    phrase = data[7]

    # Decrypt and print the plain text using Vigenere cipher
    print(f"Decoded Text: {vigenere_decode(encoded_text, phrase)}")


# Do NOT modify the following code.
if __name__ == "__main__":
    main()
